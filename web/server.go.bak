package main

import (
	"net/http"
    "gopkg.in/mgo.v2"
    "html/template"
    "path"
    "fmt"
    "time"
    "crypto/tls"
    "net"
    "github.com/sindbach/gomongo/models"
)


func ReadCollection(w http.ResponseWriter, r *http.Request) {
    fmt.Println("Handling request ...")

    tlsConfig := &tls.Config{}

    dialInfo := &mgo.DialInfo{
        Addrs: []string{"*.mongodb.net:99999"},
        Database: "admin",
        Username: "username",
        Password: "password",
        Timeout:  5 * time.Second, 
    }
    dialInfo.DialServer = func(addr *mgo.ServerAddr) (net.Conn, error) {
        conn, err := tls.Dial("tcp", addr.String(), tlsConfig)
        return conn, err
    }
    session, err := mgo.DialWithInfo(dialInfo)

    session.SetMode(mgo.Secondary, true)
    if err != nil {
        panic(err)
    }
    session.Copy()
    defer session.Close()

    c := session.DB("gopher").C("users")
    results := make([]models.User, 0, 10)
    err = c.Find(nil).Limit(10).Sort("-_id").All(&results)
    ip := path.Join("templates", "index.html")
    tmpl, err := template.ParseFiles(ip)
    if err != nil {
        panic(err)
    }

    status := models.ReplSetGetStatus{}
    if err := session.DB("admin").Run("replSetGetStatus", &status); err != nil {
        panic(err)
    } 

    webdata := models.WebData{results, status}

    if err:= tmpl.Execute(w, webdata); err != nil{
        panic(err)
    }
}

func handlerIcon(w http.ResponseWriter, r *http.Request) {} 
func main() {
    http.HandleFunc("/favicon.ico", handlerIcon)
	http.HandleFunc("/", ReadCollection)
	http.ListenAndServe(":8000", nil)
}
